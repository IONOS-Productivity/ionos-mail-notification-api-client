<?php
/**
 * EventAPIApi
 * PHP version 7.4
 *
 * @category Class
 * @package  IONOS\MailNotificationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Event Notification Handler
 *
 * This is the API client for the Mail Notification API
 *
 * The version of the OpenAPI document: 1.0.0-20241219115512
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IONOS\MailNotificationAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IONOS\MailNotificationAPI\Client\ApiException;
use IONOS\MailNotificationAPI\Client\Configuration;
use IONOS\MailNotificationAPI\Client\HeaderSelector;
use IONOS\MailNotificationAPI\Client\ObjectSerializer;

/**
 * EventAPIApi Class Doc Comment
 *
 * @category Class
 * @package  IONOS\MailNotificationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'processRemoteWipeFinishedEvent' => [
            'application/json',
        ],
        'processRemoteWipeStartedEvent' => [
            'application/json',
        ],
        'processShareByLinkEvent' => [
            'application/json',
        ],
        'processShareWithOtherUsersEvent' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation processRemoteWipeFinishedEvent
     *
     * Nextlcoud user gets informed that a remote wipe for a specific device has finished
     *
     * @param  string $brand brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeFinishedEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function processRemoteWipeFinishedEvent($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeFinishedEvent'][0])
    {
        $this->processRemoteWipeFinishedEventWithHttpInfo($brand, $wipeMessage, $contentType);
    }

    /**
     * Operation processRemoteWipeFinishedEventWithHttpInfo
     *
     * Nextlcoud user gets informed that a remote wipe for a specific device has finished
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeFinishedEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function processRemoteWipeFinishedEventWithHttpInfo($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeFinishedEvent'][0])
    {
        $request = $this->processRemoteWipeFinishedEventRequest($brand, $wipeMessage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processRemoteWipeFinishedEventAsync
     *
     * Nextlcoud user gets informed that a remote wipe for a specific device has finished
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeFinishedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processRemoteWipeFinishedEventAsync($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeFinishedEvent'][0])
    {
        return $this->processRemoteWipeFinishedEventAsyncWithHttpInfo($brand, $wipeMessage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processRemoteWipeFinishedEventAsyncWithHttpInfo
     *
     * Nextlcoud user gets informed that a remote wipe for a specific device has finished
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeFinishedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processRemoteWipeFinishedEventAsyncWithHttpInfo($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeFinishedEvent'][0])
    {
        $returnType = '';
        $request = $this->processRemoteWipeFinishedEventRequest($brand, $wipeMessage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processRemoteWipeFinishedEvent'
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeFinishedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processRemoteWipeFinishedEventRequest($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeFinishedEvent'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling processRemoteWipeFinishedEvent'
            );
        }

        // verify the required parameter 'wipeMessage' is set
        if ($wipeMessage === null || (is_array($wipeMessage) && count($wipeMessage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wipeMessage when calling processRemoteWipeFinishedEvent'
            );
        }


        $resourcePath = '/event/{brand}/remote-wipe-finished';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($wipeMessage)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($wipeMessage));
            } else {
                $httpBody = $wipeMessage;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processRemoteWipeStartedEvent
     *
     * Nextlcoud user started a remote wipe for a specific device
     *
     * @param  string $brand brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeStartedEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function processRemoteWipeStartedEvent($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeStartedEvent'][0])
    {
        $this->processRemoteWipeStartedEventWithHttpInfo($brand, $wipeMessage, $contentType);
    }

    /**
     * Operation processRemoteWipeStartedEventWithHttpInfo
     *
     * Nextlcoud user started a remote wipe for a specific device
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeStartedEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function processRemoteWipeStartedEventWithHttpInfo($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeStartedEvent'][0])
    {
        $request = $this->processRemoteWipeStartedEventRequest($brand, $wipeMessage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processRemoteWipeStartedEventAsync
     *
     * Nextlcoud user started a remote wipe for a specific device
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeStartedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processRemoteWipeStartedEventAsync($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeStartedEvent'][0])
    {
        return $this->processRemoteWipeStartedEventAsyncWithHttpInfo($brand, $wipeMessage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processRemoteWipeStartedEventAsyncWithHttpInfo
     *
     * Nextlcoud user started a remote wipe for a specific device
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeStartedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processRemoteWipeStartedEventAsyncWithHttpInfo($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeStartedEvent'][0])
    {
        $returnType = '';
        $request = $this->processRemoteWipeStartedEventRequest($brand, $wipeMessage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processRemoteWipeStartedEvent'
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\WipeMessage $wipeMessage (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processRemoteWipeStartedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processRemoteWipeStartedEventRequest($brand, $wipeMessage, string $contentType = self::contentTypes['processRemoteWipeStartedEvent'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling processRemoteWipeStartedEvent'
            );
        }

        // verify the required parameter 'wipeMessage' is set
        if ($wipeMessage === null || (is_array($wipeMessage) && count($wipeMessage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wipeMessage when calling processRemoteWipeStartedEvent'
            );
        }


        $resourcePath = '/event/{brand}/remote-wipe-started';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($wipeMessage)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($wipeMessage));
            } else {
                $httpBody = $wipeMessage;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processShareByLinkEvent
     *
     * Nextlcoud user shared a file with other users via list of receiver email addresses
     *
     * @param  string $brand brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageByLink $shareMessageByLink shareMessageByLink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareByLinkEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function processShareByLinkEvent($brand, $shareMessageByLink, string $contentType = self::contentTypes['processShareByLinkEvent'][0])
    {
        $this->processShareByLinkEventWithHttpInfo($brand, $shareMessageByLink, $contentType);
    }

    /**
     * Operation processShareByLinkEventWithHttpInfo
     *
     * Nextlcoud user shared a file with other users via list of receiver email addresses
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageByLink $shareMessageByLink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareByLinkEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function processShareByLinkEventWithHttpInfo($brand, $shareMessageByLink, string $contentType = self::contentTypes['processShareByLinkEvent'][0])
    {
        $request = $this->processShareByLinkEventRequest($brand, $shareMessageByLink, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processShareByLinkEventAsync
     *
     * Nextlcoud user shared a file with other users via list of receiver email addresses
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageByLink $shareMessageByLink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareByLinkEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processShareByLinkEventAsync($brand, $shareMessageByLink, string $contentType = self::contentTypes['processShareByLinkEvent'][0])
    {
        return $this->processShareByLinkEventAsyncWithHttpInfo($brand, $shareMessageByLink, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processShareByLinkEventAsyncWithHttpInfo
     *
     * Nextlcoud user shared a file with other users via list of receiver email addresses
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageByLink $shareMessageByLink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareByLinkEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processShareByLinkEventAsyncWithHttpInfo($brand, $shareMessageByLink, string $contentType = self::contentTypes['processShareByLinkEvent'][0])
    {
        $returnType = '';
        $request = $this->processShareByLinkEventRequest($brand, $shareMessageByLink, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processShareByLinkEvent'
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageByLink $shareMessageByLink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareByLinkEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processShareByLinkEventRequest($brand, $shareMessageByLink, string $contentType = self::contentTypes['processShareByLinkEvent'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling processShareByLinkEvent'
            );
        }

        // verify the required parameter 'shareMessageByLink' is set
        if ($shareMessageByLink === null || (is_array($shareMessageByLink) && count($shareMessageByLink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shareMessageByLink when calling processShareByLinkEvent'
            );
        }


        $resourcePath = '/event/{brand}/share-by-link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shareMessageByLink)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shareMessageByLink));
            } else {
                $httpBody = $shareMessageByLink;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processShareWithOtherUsersEvent
     *
     * Nextlcoud user shared a file with other users via list of receiver user ids in uuid format
     *
     * @param  string $brand brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageWithOtherUser $shareMessageWithOtherUser shareMessageWithOtherUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareWithOtherUsersEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function processShareWithOtherUsersEvent($brand, $shareMessageWithOtherUser, string $contentType = self::contentTypes['processShareWithOtherUsersEvent'][0])
    {
        $this->processShareWithOtherUsersEventWithHttpInfo($brand, $shareMessageWithOtherUser, $contentType);
    }

    /**
     * Operation processShareWithOtherUsersEventWithHttpInfo
     *
     * Nextlcoud user shared a file with other users via list of receiver user ids in uuid format
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageWithOtherUser $shareMessageWithOtherUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareWithOtherUsersEvent'] to see the possible values for this operation
     *
     * @throws \IONOS\MailNotificationAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function processShareWithOtherUsersEventWithHttpInfo($brand, $shareMessageWithOtherUser, string $contentType = self::contentTypes['processShareWithOtherUsersEvent'][0])
    {
        $request = $this->processShareWithOtherUsersEventRequest($brand, $shareMessageWithOtherUser, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IONOS\MailNotificationAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processShareWithOtherUsersEventAsync
     *
     * Nextlcoud user shared a file with other users via list of receiver user ids in uuid format
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageWithOtherUser $shareMessageWithOtherUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareWithOtherUsersEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processShareWithOtherUsersEventAsync($brand, $shareMessageWithOtherUser, string $contentType = self::contentTypes['processShareWithOtherUsersEvent'][0])
    {
        return $this->processShareWithOtherUsersEventAsyncWithHttpInfo($brand, $shareMessageWithOtherUser, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processShareWithOtherUsersEventAsyncWithHttpInfo
     *
     * Nextlcoud user shared a file with other users via list of receiver user ids in uuid format
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageWithOtherUser $shareMessageWithOtherUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareWithOtherUsersEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processShareWithOtherUsersEventAsyncWithHttpInfo($brand, $shareMessageWithOtherUser, string $contentType = self::contentTypes['processShareWithOtherUsersEvent'][0])
    {
        $returnType = '';
        $request = $this->processShareWithOtherUsersEventRequest($brand, $shareMessageWithOtherUser, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processShareWithOtherUsersEvent'
     *
     * @param  string $brand (required)
     * @param  \IONOS\MailNotificationAPI\Client\Model\ShareMessageWithOtherUser $shareMessageWithOtherUser (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processShareWithOtherUsersEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processShareWithOtherUsersEventRequest($brand, $shareMessageWithOtherUser, string $contentType = self::contentTypes['processShareWithOtherUsersEvent'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling processShareWithOtherUsersEvent'
            );
        }

        // verify the required parameter 'shareMessageWithOtherUser' is set
        if ($shareMessageWithOtherUser === null || (is_array($shareMessageWithOtherUser) && count($shareMessageWithOtherUser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shareMessageWithOtherUser when calling processShareWithOtherUsersEvent'
            );
        }


        $resourcePath = '/event/{brand}/share-with-other-users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shareMessageWithOtherUser)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shareMessageWithOtherUser));
            } else {
                $httpBody = $shareMessageWithOtherUser;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
