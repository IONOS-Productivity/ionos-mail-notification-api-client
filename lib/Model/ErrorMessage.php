<?php
/**
 * ErrorMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IONOS\MailNotificationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Event Notification Handler
 *
 * This is the API client for the Mail Notification API
 *
 * The version of the OpenAPI document: 1.0.0-20241129122727
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IONOS\MailNotificationAPI\Client\Model;

use \ArrayAccess;
use \IONOS\MailNotificationAPI\Client\ObjectSerializer;

/**
 * ErrorMessage Class Doc Comment
 *
 * @category Class
 * @package  IONOS\MailNotificationAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ErrorMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ErrorMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message' => 'string',
        'requestId' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message' => null,
        'requestId' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message' => false,
        'requestId' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message' => 'message',
        'requestId' => 'requestId',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message' => 'setMessage',
        'requestId' => 'setRequestId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message' => 'getMessage',
        'requestId' => 'getRequestId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS__100_CONTINUE = '100 CONTINUE';
    public const STATUS__101_SWITCHING_PROTOCOLS = '101 SWITCHING_PROTOCOLS';
    public const STATUS__102_PROCESSING = '102 PROCESSING';
    public const STATUS__103_EARLY_HINTS = '103 EARLY_HINTS';
    public const STATUS__103_CHECKPOINT = '103 CHECKPOINT';
    public const STATUS__200_OK = '200 OK';
    public const STATUS__201_CREATED = '201 CREATED';
    public const STATUS__202_ACCEPTED = '202 ACCEPTED';
    public const STATUS__203_NON_AUTHORITATIVE_INFORMATION = '203 NON_AUTHORITATIVE_INFORMATION';
    public const STATUS__204_NO_CONTENT = '204 NO_CONTENT';
    public const STATUS__205_RESET_CONTENT = '205 RESET_CONTENT';
    public const STATUS__206_PARTIAL_CONTENT = '206 PARTIAL_CONTENT';
    public const STATUS__207_MULTI_STATUS = '207 MULTI_STATUS';
    public const STATUS__208_ALREADY_REPORTED = '208 ALREADY_REPORTED';
    public const STATUS__226_IM_USED = '226 IM_USED';
    public const STATUS__300_MULTIPLE_CHOICES = '300 MULTIPLE_CHOICES';
    public const STATUS__301_MOVED_PERMANENTLY = '301 MOVED_PERMANENTLY';
    public const STATUS__302_FOUND = '302 FOUND';
    public const STATUS__302_MOVED_TEMPORARILY = '302 MOVED_TEMPORARILY';
    public const STATUS__303_SEE_OTHER = '303 SEE_OTHER';
    public const STATUS__304_NOT_MODIFIED = '304 NOT_MODIFIED';
    public const STATUS__305_USE_PROXY = '305 USE_PROXY';
    public const STATUS__307_TEMPORARY_REDIRECT = '307 TEMPORARY_REDIRECT';
    public const STATUS__308_PERMANENT_REDIRECT = '308 PERMANENT_REDIRECT';
    public const STATUS__400_BAD_REQUEST = '400 BAD_REQUEST';
    public const STATUS__401_UNAUTHORIZED = '401 UNAUTHORIZED';
    public const STATUS__402_PAYMENT_REQUIRED = '402 PAYMENT_REQUIRED';
    public const STATUS__403_FORBIDDEN = '403 FORBIDDEN';
    public const STATUS__404_NOT_FOUND = '404 NOT_FOUND';
    public const STATUS__405_METHOD_NOT_ALLOWED = '405 METHOD_NOT_ALLOWED';
    public const STATUS__406_NOT_ACCEPTABLE = '406 NOT_ACCEPTABLE';
    public const STATUS__407_PROXY_AUTHENTICATION_REQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED';
    public const STATUS__408_REQUEST_TIMEOUT = '408 REQUEST_TIMEOUT';
    public const STATUS__409_CONFLICT = '409 CONFLICT';
    public const STATUS__410_GONE = '410 GONE';
    public const STATUS__411_LENGTH_REQUIRED = '411 LENGTH_REQUIRED';
    public const STATUS__412_PRECONDITION_FAILED = '412 PRECONDITION_FAILED';
    public const STATUS__413_PAYLOAD_TOO_LARGE = '413 PAYLOAD_TOO_LARGE';
    public const STATUS__413_REQUEST_ENTITY_TOO_LARGE = '413 REQUEST_ENTITY_TOO_LARGE';
    public const STATUS__414_URI_TOO_LONG = '414 URI_TOO_LONG';
    public const STATUS__414_REQUEST_URI_TOO_LONG = '414 REQUEST_URI_TOO_LONG';
    public const STATUS__415_UNSUPPORTED_MEDIA_TYPE = '415 UNSUPPORTED_MEDIA_TYPE';
    public const STATUS__416_REQUESTED_RANGE_NOT_SATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE';
    public const STATUS__417_EXPECTATION_FAILED = '417 EXPECTATION_FAILED';
    public const STATUS__418_I_AM_A_TEAPOT = '418 I_AM_A_TEAPOT';
    public const STATUS__419_INSUFFICIENT_SPACE_ON_RESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE';
    public const STATUS__420_METHOD_FAILURE = '420 METHOD_FAILURE';
    public const STATUS__421_DESTINATION_LOCKED = '421 DESTINATION_LOCKED';
    public const STATUS__422_UNPROCESSABLE_ENTITY = '422 UNPROCESSABLE_ENTITY';
    public const STATUS__423_LOCKED = '423 LOCKED';
    public const STATUS__424_FAILED_DEPENDENCY = '424 FAILED_DEPENDENCY';
    public const STATUS__425_TOO_EARLY = '425 TOO_EARLY';
    public const STATUS__426_UPGRADE_REQUIRED = '426 UPGRADE_REQUIRED';
    public const STATUS__428_PRECONDITION_REQUIRED = '428 PRECONDITION_REQUIRED';
    public const STATUS__429_TOO_MANY_REQUESTS = '429 TOO_MANY_REQUESTS';
    public const STATUS__431_REQUEST_HEADER_FIELDS_TOO_LARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE';
    public const STATUS__451_UNAVAILABLE_FOR_LEGAL_REASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS';
    public const STATUS__500_INTERNAL_SERVER_ERROR = '500 INTERNAL_SERVER_ERROR';
    public const STATUS__501_NOT_IMPLEMENTED = '501 NOT_IMPLEMENTED';
    public const STATUS__502_BAD_GATEWAY = '502 BAD_GATEWAY';
    public const STATUS__503_SERVICE_UNAVAILABLE = '503 SERVICE_UNAVAILABLE';
    public const STATUS__504_GATEWAY_TIMEOUT = '504 GATEWAY_TIMEOUT';
    public const STATUS__505_HTTP_VERSION_NOT_SUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED';
    public const STATUS__506_VARIANT_ALSO_NEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES';
    public const STATUS__507_INSUFFICIENT_STORAGE = '507 INSUFFICIENT_STORAGE';
    public const STATUS__508_LOOP_DETECTED = '508 LOOP_DETECTED';
    public const STATUS__509_BANDWIDTH_LIMIT_EXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED';
    public const STATUS__510_NOT_EXTENDED = '510 NOT_EXTENDED';
    public const STATUS__511_NETWORK_AUTHENTICATION_REQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__100_CONTINUE,
            self::STATUS__101_SWITCHING_PROTOCOLS,
            self::STATUS__102_PROCESSING,
            self::STATUS__103_EARLY_HINTS,
            self::STATUS__103_CHECKPOINT,
            self::STATUS__200_OK,
            self::STATUS__201_CREATED,
            self::STATUS__202_ACCEPTED,
            self::STATUS__203_NON_AUTHORITATIVE_INFORMATION,
            self::STATUS__204_NO_CONTENT,
            self::STATUS__205_RESET_CONTENT,
            self::STATUS__206_PARTIAL_CONTENT,
            self::STATUS__207_MULTI_STATUS,
            self::STATUS__208_ALREADY_REPORTED,
            self::STATUS__226_IM_USED,
            self::STATUS__300_MULTIPLE_CHOICES,
            self::STATUS__301_MOVED_PERMANENTLY,
            self::STATUS__302_FOUND,
            self::STATUS__302_MOVED_TEMPORARILY,
            self::STATUS__303_SEE_OTHER,
            self::STATUS__304_NOT_MODIFIED,
            self::STATUS__305_USE_PROXY,
            self::STATUS__307_TEMPORARY_REDIRECT,
            self::STATUS__308_PERMANENT_REDIRECT,
            self::STATUS__400_BAD_REQUEST,
            self::STATUS__401_UNAUTHORIZED,
            self::STATUS__402_PAYMENT_REQUIRED,
            self::STATUS__403_FORBIDDEN,
            self::STATUS__404_NOT_FOUND,
            self::STATUS__405_METHOD_NOT_ALLOWED,
            self::STATUS__406_NOT_ACCEPTABLE,
            self::STATUS__407_PROXY_AUTHENTICATION_REQUIRED,
            self::STATUS__408_REQUEST_TIMEOUT,
            self::STATUS__409_CONFLICT,
            self::STATUS__410_GONE,
            self::STATUS__411_LENGTH_REQUIRED,
            self::STATUS__412_PRECONDITION_FAILED,
            self::STATUS__413_PAYLOAD_TOO_LARGE,
            self::STATUS__413_REQUEST_ENTITY_TOO_LARGE,
            self::STATUS__414_URI_TOO_LONG,
            self::STATUS__414_REQUEST_URI_TOO_LONG,
            self::STATUS__415_UNSUPPORTED_MEDIA_TYPE,
            self::STATUS__416_REQUESTED_RANGE_NOT_SATISFIABLE,
            self::STATUS__417_EXPECTATION_FAILED,
            self::STATUS__418_I_AM_A_TEAPOT,
            self::STATUS__419_INSUFFICIENT_SPACE_ON_RESOURCE,
            self::STATUS__420_METHOD_FAILURE,
            self::STATUS__421_DESTINATION_LOCKED,
            self::STATUS__422_UNPROCESSABLE_ENTITY,
            self::STATUS__423_LOCKED,
            self::STATUS__424_FAILED_DEPENDENCY,
            self::STATUS__425_TOO_EARLY,
            self::STATUS__426_UPGRADE_REQUIRED,
            self::STATUS__428_PRECONDITION_REQUIRED,
            self::STATUS__429_TOO_MANY_REQUESTS,
            self::STATUS__431_REQUEST_HEADER_FIELDS_TOO_LARGE,
            self::STATUS__451_UNAVAILABLE_FOR_LEGAL_REASONS,
            self::STATUS__500_INTERNAL_SERVER_ERROR,
            self::STATUS__501_NOT_IMPLEMENTED,
            self::STATUS__502_BAD_GATEWAY,
            self::STATUS__503_SERVICE_UNAVAILABLE,
            self::STATUS__504_GATEWAY_TIMEOUT,
            self::STATUS__505_HTTP_VERSION_NOT_SUPPORTED,
            self::STATUS__506_VARIANT_ALSO_NEGOTIATES,
            self::STATUS__507_INSUFFICIENT_STORAGE,
            self::STATUS__508_LOOP_DETECTED,
            self::STATUS__509_BANDWIDTH_LIMIT_EXCEEDED,
            self::STATUS__510_NOT_EXTENDED,
            self::STATUS__511_NETWORK_AUTHENTICATION_REQUIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('requestId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets requestId
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['requestId'];
    }

    /**
     * Sets requestId
     *
     * @param string|null $requestId requestId
     *
     * @return self
     */
    public function setRequestId($requestId)
    {
        if (is_null($requestId)) {
            throw new \InvalidArgumentException('non-nullable requestId cannot be null');
        }
        $this->container['requestId'] = $requestId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
